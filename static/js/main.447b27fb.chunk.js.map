{"version":3,"sources":["reportWebVitals.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","console","log","state","fetch","response","json","users","filteredrobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4BCKCQ,EAVF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OACI,sBAAKC,UAAU,iDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBACjB,6BAAKC,IACL,4BAAIC,QCOLI,EAVE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,8BACKA,EAAOC,KAAI,SAACC,EAAKC,GAC1B,OAAO,cAAC,EAAD,CAAcV,GAAIO,EAAOG,GAAGV,GAAIC,KAAMM,EAAOG,GAAGT,KAAMC,MAAOK,EAAOG,GAAGR,OAA5DQ,SCMPC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACAA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCPI,G,MARA,SAACC,GACZ,OACI,sBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,iBAAkBC,OAAQ,SAAnE,UACKJ,EAAMK,SADX,SCkDOC,E,kDA9CX,aAAe,IAAD,8BACV,gBAmBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,QAC1CC,QAAQC,IAAIN,EAAMG,OAAOC,QApBzB,EAAKG,MAAQ,CACTzB,OAAQ,GACRoB,YAAa,IAJP,E,gEAQO,IAAD,OAChBM,MAAM,8CACDxC,MAAK,SAAAyC,GACF,OAAOA,EAASC,UAEnB1C,MACG,SAAA2C,GACI,EAAKV,SAAS,CAAEnB,OAAQ6B,S,+BAU9B,IAAD,OACCC,EAAiBC,KAAKN,MAAMzB,OAAOgC,QAAO,SAACC,GAC7C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKV,MAAML,YAAYc,kBAEpE,OAAiC,IAA7BH,KAAKN,MAAMzB,OAAOoC,OACX,2DAIH,sBAAKxC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAc0B,KAAKd,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAQ8B,a,GAvCxBO,a,MCClBC,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1B1D,M","file":"static/js/main.447b27fb.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`}/>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n// import {robots} from './robots';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return(\r\n        <div>\r\n            {robots.map((user,i) => {\r\n    return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/> })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search robots'\r\n            onChange={searchChange} \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border:'5px solid blue', height: '800px'}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\n// import { robots } from './robots';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(\r\n                users => {\r\n                    this.setState({ robots: users });\r\n                }\r\n            );\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        const filteredrobots = this.state.robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Hold on! Loading.........</h1>\r\n        }\r\n        else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f2'>Robofriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <CardList robots={filteredrobots} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport 'tachyons';\n// import CardList from './CardList';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}